
In the Problem.cs file,  The Probelem is defined -  How it was implemented and why it violates the respective principle - as a comment
In the Solution.cs file, The Solution is defined -  How it was implemented and how it follows the respective principle - as a comment


-----------------------------------------------------------------------------------------------------------------------------------------------------
Summary:

SOLID Principles:
	 Design principles intended to make software designs more understandable, flexible, and maintainable. 
	 These principles help developers create systems that are easy to scale, test, and modify without introducing unintended side effects.

	 Advatages of following Solid principles:
		- Improves Maintainability
		- Facilitates Testing
		- Promotes Reusability
		- Reduces Coupling
		
		- Incase of introducing new features to an application. The new developer doesnt need to be completely aware of the entire system, inorder to introduce a
		new functionality or feature. Since everything will be decoupled and follow a strict principles.

Single Responsibility Principle:
	- Everything in that class should be related to a single purpose.
	- There may be many members/methods in class as long as they relate to a single responsibility.

Open Close Principle:
	- A class should be open for extension but closed for modification.
	- Here Extension is can have newly created methods which can serve new purpose, at the same time the existing implementation should not be modified.


Interface Segregation Principle:
	- A class should only implement an interface if it actually needs and uses the methods defined in it.
	- Instead of having one big interface with many methods, break it into smaller, more specific ones.

Dependency Inversion Principle:
	- High-level modules (e.g., business logic) shouldn't directly depend on low-level modules (e.g., database or external systems).
	- Instead, both should rely on an interface or abstract class. This makes the system flexible and easier to maintain.
	- Think of a wall socket and a plug:
		- The wall socket doesn’t depend on the design of a specific appliance (low-level module).
			- No matter what the low-level module is (Mixie, Grinder, Charger, AC etc), The socket remains same.
		- Instead, both the socket and appliances adhere to a common standard (interface).
		- This allows you to plug in any appliance without modifying the socket.